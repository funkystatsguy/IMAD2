library(devtools)
use_this("random_normal")
use_r("random_normal")
devtools::load_all(".")
random_normal()
?random_normal()
?random_normal
devtools::load_all(".")
?random_normal
devtools::load_all(".")
?random_normal
devtools::load_all(".")
?random_normal
library(IMAD2)
example(random_normal, package = "IMAD2")
use_r("weighted_objective_cont")
devtools::load_all(".")
?weighted_objective_cont
use_r("IMAD_simulation_cont")
devtools::load_all(".")
IMAD_simulation_cont()
devtools::load_all(".")
IMAD_simulation_cont()
use_r("random_binomial")
devtools::load_all(".")
?random_binomial
devtools::load_all(".")
random_binomial()
?random_binomial
devtools::load_all(".")
?random_binomial
devtools::load_all(".")
?random_binomial
use_r{"weighted_objective_bin"}
use_r("weighted_objective_bin')
)
"'"
)))
"
quit()
weighted_objective_bin <- function(pa_clin = 0.6, pb_clin = 0.5, pa_hat = 0.6, pb_hat = 0.5, fa = 0.5,
fb = 0.5, weight = 0.5, n_a = 10, n_b = 10, n = 20,
zalpha = qnorm(0.05/2), zbeta = qnorm(0.2), nu = 0.1){
#Set CME again;
cme = ( nu / (zalpha + zbeta)) ^ 2
#Weights
w1 <- weight
w2 <- 1 - w1
#Set q values;
qa_hat = 1 - pa_hat
qb_hat = 1 - pb_hat
qa_clin = 1 - pa_clin
qb_clin = 1 - pb_clin
#Lambda Functions
lambda1 <- ((sqrt(pa_hat * qa_hat) * sqrt(fa) + sqrt(pb_hat * qb_hat) * sqrt(fb)) / cme ) ^ 2
lambda2 <- ((sqrt(pa_hat * qa_hat) + sqrt(pb_hat * qb_hat)) / (cme)) ^ 2
#Objective functions for RAR (phi1) and SSR(phi2)
phi1 <- sqrt(lambda1) * sqrt(pa_hat * qa_hat) * sqrt(fa) + sqrt(lambda1) * (pb_hat * qb_hat) * sqrt(fb)
phi2 <- sqrt(lambda2) * sqrt(pa_hat * qa_hat) + sqrt(lambda2) * sqrt(pb_hat * qb_hat)
#Combine all elements to identify lambda for sample size of a and b
lambda <- ((sqrt(pa_hat * qa_hat) * sqrt((w1 * fa) / phi1 + w2 / phi2) +
sqrt(pb_hat * qb_hat) * sqrt((w1 * fa) / phi1 + w2 / phi2)) / cme) ^ 2
#Update optimal sample sizes for a and b
naopt <- sqrt(lambda) * sqrt(pa_hat * qa_hat) / sqrt((w1 * fa) / phi1 + w2 / phi2)
nbopt <- sqrt(lambda) * sqrt(pb_hat * qb_hat) / sqrt((w1 * fb) / phi1 + w2 / phi2)
#Update allocation ratio
piopthat <- naopt / (naopt + nbopt)
#Updated sample size ratio
rhoopthat <- nbopt / naopt
#Re-estimate sample size required for each group and total sample size;
#WE CANNOT USE PA_HAT OR PB_HAT HERE!!!!
nahat <- ceiling(((zalpha + zbeta) ^ 2 / nu ^ 2) * ((pb_clin * qb_clin) / rhoopthat + pa_clin * qa_clin))
nbhat <- ceiling(rhoopthat * nahat)
nj <- nahat + nbhat
#Get ERADE optimal method
gamma <- 0.5
piratio <- n_a / n
piadjhat <- ifelse(piratio > piopthat, gamma * piopthat, ifelse(piopthat > piratio, 1 - gamma * (1 - piopthat), piopthat))
#Get Randomized next allocation
allocation <- ifelse(runif(1) < piadjhat, 1, 0)
#Return necessary outcomes
outcomes <- list(allocation, piadjhat, nj, nahat, nbhat)
names(outcomes) <- c("allocation", "pi", "estimated_n", "estimated_na", "estimated_nb")
return(outcomes)
}
use_r("weighted_objective_bin")
use_r("pi_nought")
devtools::load_all(".")
use_r("IMAD_simulation_bin")
devtools::load_all(".")
random_normal()
library(IMAD2)
devtools::load_all(".")
IMAD_simulation_bin()
devtools::load_all(".")
IMAD_simulation_bin()
devtools::load_all(".")
IMAD_simulation_bin()
pi_nought()
devtools::load_all(".")
IMAD_simulation_bin()
IMAD_simulation_bin()
weighted_objective_bin()
devtools::load_all(".")
IMAD_simulation_bin()
IMAD_simulation_bin()
IMAD_simulation_bin(p = c(0.8, 0.5))
IMAD_simulation_bin(p = c(0.8, 0.5))
#' @param p A vector that takes the actual simulated difference between two groups
#' @param p_clin A vector that takes the minimum clinically significant success probabilities of each group
#' @param weight The weight of Sample Size Re-Estimation and Random Adaptive Re-Allocation
#' @param alpha The Type 1 error rate
#' @param beta The Type 2 error rate
#'
#' @return The number of individuals allocated to each group, total sample size, and minimum estimated sample size
#' @export
#'
#' @examples IMAD_simulation_bin()
IMAD_simulation_bin <- function(n = c(20, 20), p = c(0.6, 0.5), p_clin = c(0.6, 0.5), weight = 0.5, alpha = 0.05, beta = 0.8){
#Bring in random binom
random_bin <- random_binomial(n = n, p = p)
#Set values from random binomial
a <- random_bin$a
b <- random_bin$b
#Get nu from clinician expected differene;
nu = p_clin[1] - p_clin[2]
#Get z values for alpha, beta, and combined
zalpha <- qnorm(alpha/2)
zbeta <- qnorm(beta)
zc <- zalpha + zbeta
#CME
cme <- (nu / (zc)) ^ 2
#Initial Sample sizes
n <- random_bin$ninit
n_a <- random_bin$nainit
n_b <- random_bin$nbinit
#Get random pi values
p <- p
#Set initial odds ratio
or_nought <- (p_clin[1] * (1 - p_clin[2])) / (p_clin[2] * (1 - p_clin[1]))
#Set pi_knot;
#pi_null <- pi_nought(pa_clin = p_clin[1], pb_clin = p_clin[2], weight = weight, cme = cme)
pi_null <- 0.5
repeat{
#Get intervention values
if(n_a == random_bin$nainit){
a = random_bin$a
} else {
a = newval$a
}
#Get control values
if(n_b == random_bin$nbinit){
b = random_bin$b
} else {
b = newval$b
}
#Get n of a and b
n_a = as.numeric(length(a))
n_b = as.numeric(length(b))
n = n_a + n_b
#Set probability of a
pa_hat <- sum(a) / length(a)
pa_hat <- ifelse(pa_hat == 1, .99, pa_hat)
qa_hat <- 1- pa_hat
#Set probability of b
pb_hat <- sum(b) / length(b)
pb_hat <- ifelse(pb_hat == 1, .99, pb_hat)
qb_hat <- 1 - pb_hat
#Set odds ratios of a and b
or_a <- pa_hat * qb_hat / pb_hat * qa_hat
or_b <- pb_hat * qa_hat / pa_hat * qb_hat
#Set nj
nj = (1 / log(1/or_nought ^ 2)) * 2 * log(sqrt((pa_hat * qa_hat) / (pb_hat * qb_hat)) * ((1 / pi_null) - 1))
#Get function needed for a and b
fa <- exp((nj) * log(1 / or_a))
fb <- exp((nj) * log(1 / or_b))
#Get weighted objective function
wo <- weighted_objective_bin(pa_clin = p_clin[1], pb_clin = p_clin[2], pa_hat = pa_hat, pb_hat = pb_hat,
fa = fa, fb = fb, weight = weight, n_a = n_a, n_b = n_b,
n = n, zalpha = zalpha, zbeta = zbeta)
allocation <- wo$allocation
#Allocation assignment
if(allocation == 0){
a = as.matrix(c(a, rbinom(1, 1, p[1])))
} else {
a = a
}
if(allocation == 1){
b = as.matrix(c(b, rbinom(1, 1, p[2])))
} else {
b = b
}
#Get new length values of a and b
n_a <- as.numeric(length(a))
n_b <- as.numeric(length(b))
n <- n_a + n_b
#Get new values
newval <- list(a, b, n , wo$estimated_n)
names(newval) <- c("a", "b", "n", "est_n")
#Set what we would like to return as output
out <- list(length(a), length(b), n, wo$estimated_n)
names(out) <- c('n_a', "n_b", "n", "est_n")
if (n >= wo$estimated_n){
return(out)
}
}
}
devtools::load_all(".")
devtools::load_all(".")
IMAD_simulation_bin()
IMAD_simulation_bin()
IMAD_simulation_bin(p = c(0.8, 0.5))
IMAD_simulation_bin(p = c(0.8, 0.5))
IMAD_simulation_bin(p = c(0.8, 0.5))
IMAD_simulation_bin(p = c(0.8, 0.5))
library(devtools)
use_r("IMAD_next_val_cont")
devtools::load_all(".")
IMAD_next_val_cont
?IMAD_next_val_cont
?IMAD_next_val_cont
use_r("IMAD_next_val_bin")
source("C:/Users/afunk/Desktop/Dissertation/IMAD2/R/IMAD_next_val_bin.R")
devtools::load_all(".")
library(IMAD2)
library(IMAD2)
IMAD_simulation_cont()
IMAD_simulation_bin()
IMAD_next_val_bin()
IMAD_next_val_bin()
IMAD_next_val_cont()
?IMAD_next_val_bin
library(IMAD2)
IMAD2::IMAD_next_val_bin()
IMAD2::IMAD_next_val_cont()
?IMAD_next_val_cont
IMAD2::IMAD_next_val_cont()
?IMAD_next_val_cont
devtools::load_all(".")
IMAD_next_val_cont()
?IMAD_next_val_cont
devtools::load_all(".")
?IMAD_next_val_cont
IMAD_next_val_cont(rnorm(20, 1, 2), rnorm(10, 0, 2), weight = 0.7, nu = 0.8)
IMAD_next_val_cont(rnorm(20, 1, 2), rnorm(20, 0, 2), weight = 0.7, nu = 0.8)
IMAD_simulation_cont()
devtools::load_all(".")
IMAD_simulation_cont()
#' @param n A vector giving the initial counts given to each group
#' @param weight A weighting of Sample Size Re-estimation and Random Adaptive Re-Allocation
#' @param alpha The Type 1 error rate
#' @param beta The Type 2 error rate
#' @param nu  The preset clinically meaningful difference to be looked for
#'
#' @return Gives the total number of patients to be allocated in each group as well as total sample size for that iteration of the simulation
#' @export
#'
#' @examples IMAD_simulation_cont
IMAD_simulation_cont <- function(mu = c(1, 0), sig = c(2, 2), n = c(20, 20), weight = 0.5, alpha = 0.05, beta = 0.2, nu = 1){
#Bring in Random Number Generator
random_norm <- random_normal(mu = mu, sig = sig, n = n)
#Standard Deviation Calculation
#Alpha deviation;
zalpha <- qnorm(alpha/2)
#Beta deviation
zbeta <- qnorm(beta)
#Aggregate Deviation
zc <- zalpha + zbeta
#Standardize Clinically meaningful effect size
#BE SURE TO RELABEL
cme <- (nu / zc) ^ 2
#Set values from random_norm
#Intervention
a <- random_norm$a
#Control
b <- random_norm$b
#Initial Sample Sizes
n <- random_norm$ninit
n_a <- random_norm$nainit
n_b <- random_norm$nbinit
#Get random mu values
mu = mu
sig = sig
repeat{
#Get intervention values
if(n_a == random_norm$nainit){
a = random_norm$a
} else {
a = newval$a
}
#Get control values
if(n_b == random_norm$nbinit){
b = random_norm$b
} else {
b = newval$b
}
#Get n of a and b
n_a = as.numeric(length(a))
n_b = as.numeric(length(b))
n = n_a + n_b
n1 <- n + 1
#Mean of Intervention
meana <- mean(a)
#Mean of Control
meanb <- mean(b)
#SD of Intervention
sda <- sd(a)
#SD of Control
sdb <- sd(b)
#Get estimated functions for a and b;
#Identify z-scores for each variable;
faz <- (meana - meanb) / (n1 * sqrt(sda^2 + sdb^2))
fab <- (meanb - meana) / (n1 * sqrt(sda^2 + sdb^2))
#Get normal CDF scores for a and b;
fa <- pnorm(faz)
fb <- pnorm(fab)
#Get weighted objective function
wo <- weighted_objective_cont(sda = sda, sdb = sdb, fa = fa, fb = fb, cme = cme,
n = n, n_a = n_a, n_b = n_b, zalpha = zalpha, zbeta = zbeta,
weight = weight, nu = nu)
allocation <- wo$allocation
#Allocation assignment
if(allocation == 1){
a = as.matrix(c(a, rnorm(1, mu[1], sig[1])))
} else {
a = a
}
if(allocation == 0){
b = as.matrix(c(b, rnorm(1, mu[2], sig[2])))
} else {
b = b
}
#a <- ifelse(allocation == 1, c(a, rnorm(1, mu[1], sig[1])), a)
#b <- ifelse(allocation == 0, c(b, rnorm(1, mu[2], sig[2])), b)6
n_a <- as.numeric(length(a))
n_b <- as.numeric(length(b))
n <- n_a + n_b
#Get new values
newval <- list(a, b)
names(newval) <- c("a", "b")
#Set what we would like to return as output
out <- list(length(a), length(b), n, wo$estimated_n)
names(out) <- c('n_a', "n_b", "n", "est_n")
if (n >= wo$estimated_n){
return(out)
}
}
}
devtools::load_all(".")
devtools::load_all(".")
IMAD_simulation_cont()
?IMAD_simulation_cont
IMAD_simulation_cont()
?IMAD_simulation_cont
?IMAD_simulation_cont
?IMAD_simulation_cont
IMAD_simulation_cont()
IMAD_simulation_cont(c(2, 0), c(3, 3), c(20, 20), weight = 0.3, nu = 1.3)
IMAD_simulation_cont(c(2, 0), c(3, 3), c(20, 20), weight = 0.3, nu = 1.3)
IMAD_simulation_cont(c(2, 0), c(3, 3), c(20, 20), weight = 0.3, nu = 1.3)
IMAD_simulation_cont(mu = c(2, 0), sig = c(3, 3), n = c(20, 20), weight = 0.3, nu = 1.3)
IMAD_simulation_cont(mu = c(2, 0), sig = c(3, 3), n = c(20, 20), weight = 0.3, nu = 1.3)
IMAD_simulation_cont(mu = c(2, 0), sig = c(3, 3), n = c(20, 20), weight = 0.3, nu = 1.3)
IMAD_simulation_cont(mu = c(2, 0), sig = c(3, 3), n = c(20, 20), weight = 0.3, nu = 1.3)
IMAD_simulation_cont(mu = c(2, 0), sig = c(3, 3), n = c(20, 20), weight = 0.3, nu = 1.3)
?random_normal
?weighted_objective_cont
devtools::load_all(".")
?weighted_objective_cont
weighted_objective_cont()
devtools::load_all(".")
?IMAD_simulation_cont
devtools::load_all(".")
?IMAD_next_val_cont
?IMAD_simulation_cont
# Read UNAVERAGED data CSV into R
DataPrimUn <- read.csv(file="C:/Users/afunk/Downloads/LM input dta Primary unaveraged.csv")
DataPrimUn <- read.csv(file="C:/Users/afunk/Downloads/LM input dta Primary unaveraged.csv")
# Read UNAVERAGED data CSV into R
DataPrimUn <- read.csv(file="C:/Users/afunk/Downloads/LM input data Primary unaveraged.csv")
DataPrimUn$PoseFactor <- as.factor(DataPrimUn$Pose)
DataPrimUn$SxFactor <- as.factor(DataPrimUn$Sx)
# Load packages LME4, EMMEANS, LSMEANS, VISREG
library(lme4)
?lmer
primUn.lmer <- lmer(MVIC ~ SxFactor + BM + Ht + PoseFactor + PMVIC + Age | ID, DataPrimUn)
primUn.lmer <- lmer(MVIC ~ SxFactor + BM + Ht + PoseFactor + PMVIC + Age + (1| ID), DataPrimUn)
summary(primUn.lmer)
anova(primUn.lmer)
install.packages("lmerTest")
library(lmerTest)
primUn.lmer <- lmer(MVIC ~ SxFactor + BM + Ht + PoseFactor + PMVIC + Age + (1| ID), DataPrimUn)
summary(primUn.lmer)
anova(primUn.lmer)
install.packages("MuMIn")
library(MuMIn)
r.squaredGLMM(primUn.lmer)
icc(primUn.lmer)
summary(primUn.lmer)
summ <- summary(primUn.lmer)
summ
ICC <- summ$coefficients
ICC <- summ$residuals
ICC
ICC <- summ$sigma
ICC
ICC <- 141.2 / (141.2 + 128.7)
ICC
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
source("C:/Users/afunk/Desktop/Dissertation/IMAD2/R/IMAD_next_val_cont.R", echo=TRUE)
library(roxygen2)
use_r("IMAD_vectors_cont")
library(devtools)
use_r("IMAD_vectors_cont")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
?IMAD2::IMAD_next_val_cont
library(IMAD2)
devtools::load_all(".")
library(IMAD2)
use.r()
library(devtools)
use_r("IMAD_cont_dataset")
devtools::load_all(".")
use_r("IMAD_bin_dataset")
library(IMAD2)
library(IMAD2)
library(IMAD2)
library(IMAD2)
library(IMAD2)
library(IMAD2)
update.packages()
install.packages("Rtools")
detach(packages:Rtools)
R.version
Pacakegs(Rtools)
R.version()
install.packages("Rtools")
library(IMAD2)
